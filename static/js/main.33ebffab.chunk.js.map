{"version":3,"sources":["componenets/QuoteMachine/QuoteMachine.module.css","redux/quote-reducer.js","componenets/QuoteMachine/QuoteMachine.jsx","componenets/QuoteMachine/QuoteMachineContainer.jsx","api/api.js","App.js","reportWebVitals.js","redux/redux-store.js","index.js"],"names":["module","exports","SET_QUOTE","initialState","text","author","quoteReducer","state","action","type","QuoteMachine","className","s","quoteContainer","quoteText","this","props","quoteAuthor","quoteButtonContainer","quoteButton","onClick","onButtonClicked","React","Component","QuoteMachineApiComponent","getQuoteThC","compose","connect","dispatch","a","axios","baseUrl","then","response","data","quotes","App","QuoteMachineContainer","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"sHACAA,EAAOC,QAAU,CAAC,eAAiB,qCAAqC,UAAY,gCAAgC,YAAc,kCAAkC,qBAAuB,2CAA2C,YAAc,oC,4NCC9OC,EAAY,YAEZC,EAAe,CACnBC,KAAM,GACNC,OAAQ,IAuBKC,EApBM,WAAmC,IAAlCC,EAAiC,uDAAzBJ,EAAcK,EAAW,uCACrD,OAAQA,EAAOC,MACb,KAAKP,EACH,OAAO,2BAAKK,GAAZ,IAAmBH,KAAMI,EAAOJ,KAAMC,OAAQG,EAAOH,SAEvD,QACE,OAAOE,I,wBCSEG,E,4JApBb,WACE,OACE,8BACE,sBAAKC,UAAWC,IAAEC,eAAlB,UACE,qBAAKF,UAAWC,IAAEE,UAAlB,SAA8BC,KAAKC,MAAMZ,OACzC,sBAAKO,UAAWC,IAAEK,YAAlB,oBAAkCF,KAAKC,MAAMX,UAC7C,qBAAKM,UAAWC,IAAEM,qBAAlB,SACE,wBACEP,UAAWC,IAAEO,YACbC,QAASL,KAAKC,MAAMK,gBAFtB,kC,GAReC,IAAMC,WCG3BC,E,4MAIJH,gBAAkB,WAChB,EAAKL,MAAMS,e,uDAJb,WACEV,KAAKC,MAAMS,gB,oBAKb,WACE,OACE,8BACE,cAAC,EAAD,CACEpB,OAAQU,KAAKC,MAAMX,OACnBD,KAAMW,KAAKC,MAAMZ,KACjBiB,gBAAiBN,KAAKM,wB,GAbOC,IAAMC,WA2B9BG,cAAQC,aAPD,SAACpB,GACrB,MAAO,CACLH,KAAMG,EAAMH,KACZC,OAAQE,EAAMF,UAI8B,CAAEoB,YFTvB,yDAAM,WAAOG,GAAP,eAAAC,EAAA,sEGnBxBC,MAAUC,4DAAgCC,MAAK,SAACC,GACrD,OAAOA,EAASC,KAAKC,UHkBQ,OAC3BA,EAD2B,OAE/BP,GANkBxB,EAME+B,EAAO,GAAG/B,KANNC,EAMY8B,EAAO,GAAG9B,OALvC,CAAEI,KAAMP,EAAWE,OAAMC,YAGD,iCAJd,IAACD,EAAMC,IAIO,OAAN,yDESZqB,CACbF,GEvBaY,E,4JALb,WACE,OAAO,cAACC,EAAD,Q,GAFOf,IAAMC,WCOTe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBR,MAAK,YAAkD,IAA/CS,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,gBCFCO,EADDC,YAAYzC,EAAc0C,YAAgBC,MCKxDC,IAASC,OACP,cAAC,IAAD,UACE,cAAC,IAAD,CAAUL,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJM,SAASC,eAAe,SAM1Bf,M","file":"static/js/main.33ebffab.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"quoteContainer\":\"QuoteMachine_quoteContainer__1RgUu\",\"quoteText\":\"QuoteMachine_quoteText__zvSl2\",\"quoteAuthor\":\"QuoteMachine_quoteAuthor__3evWH\",\"quoteButtonContainer\":\"QuoteMachine_quoteButtonContainer___77RP\",\"quoteButton\":\"QuoteMachine_quoteButton__1BBlm\"};","import { getQuote } from \"../api/api\";\r\n\r\nconst SET_QUOTE = \"SET_QUOTE\";\r\n\r\nconst initialState = {\r\n  text: \"\",\r\n  author: \"\",\r\n};\r\n\r\nconst quoteReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_QUOTE: {\r\n      return { ...state, text: action.text, author: action.author };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nconst setQuoteAC = (text, author) => {\r\n  return { type: SET_QUOTE, text, author };\r\n};\r\n\r\nexport const getQuoteThC = () => async (dispatch) => {\r\n  let quotes = await getQuote();\r\n  dispatch(setQuoteAC(quotes[0].text, quotes[0].author));\r\n};\r\n\r\nexport default quoteReducer;\r\n","import React from \"react\";\r\nimport s from \"./QuoteMachine.module.css\";\r\n\r\nclass QuoteMachine extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className={s.quoteContainer}>\r\n          <div className={s.quoteText}>{this.props.text}</div>\r\n          <div className={s.quoteAuthor}>â’¸ {this.props.author}</div>\r\n          <div className={s.quoteButtonContainer}>\r\n            <button\r\n              className={s.quoteButton}\r\n              onClick={this.props.onButtonClicked}\r\n            >\r\n              New Quote\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuoteMachine;\r\n","import { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { getQuoteThC } from \"../../redux/quote-reducer\";\r\nimport React from \"react\";\r\nimport QuoteMachine from \"./QuoteMachine\";\r\n\r\nclass QuoteMachineApiComponent extends React.Component {\r\n  componentDidMount() {\r\n    this.props.getQuoteThC();\r\n  }\r\n  onButtonClicked = () => {\r\n    this.props.getQuoteThC();\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <QuoteMachine\r\n          author={this.props.author}\r\n          text={this.props.text}\r\n          onButtonClicked={this.onButtonClicked}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    text: state.text,\r\n    author: state.author,\r\n  };\r\n};\r\n\r\nexport default compose(connect(mapStateToProps, { getQuoteThC }))(\r\n  QuoteMachineApiComponent\r\n);\r\n","import * as axios from \"axios\";\r\n\r\nconst baseUrl = `https://goquotes-api.herokuapp.com/api`;\r\n\r\nexport const getQuote = () => {\r\n  return axios.get(baseUrl + `/v1/random?count=1`).then((response) => {\r\n    return response.data.quotes;\r\n  });\r\n};\r\n","import \"./App.css\";\n\nimport React from \"react\";\nimport QuoteMachineContainer from \"./componenets/QuoteMachine/QuoteMachineContainer\";\n\nclass App extends React.Component {\n  render() {\n    return <QuoteMachineContainer />;\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, createStore } from \"redux\";\r\nimport quoteReducer from \"./quote-reducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n\r\nconst store = createStore(quoteReducer, applyMiddleware(thunkMiddleware));\r\nexport default store;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/redux-store\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}